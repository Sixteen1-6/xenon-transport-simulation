document.addEventListener('DOMContentLoaded', function() {
    // Get DOM elements
    const numWaterSlider = document.getElementById('numWater');
    const numWaterValue = document.getElementById('numWaterValue');
    const numXenonSlider = document.getElementById('numXenon');
    const numXenonValue = document.getElementById('numXenonValue');
    const simulationForm = document.getElementById('simulation-form');
    const loadingIndicator = document.getElementById('loading-indicator');
    const videoElement = document.getElementById('simulation-video');
    const statusMessage = document.getElementById('status-message');

    // List of pre-generated videos that are expected to exist
    // This should be updated as more videos are generated
    const knownVideos = [
        { water: 400, xenon: 20, file: 'default.mp4' }, // Default video
        // Add more as they're generated by GitHub Actions
    ];

    // Update slider values on input
    numWaterSlider.addEventListener('input', function() {
        numWaterValue.textContent = this.value;
    });

    numXenonSlider.addEventListener('input', function() {
        numXenonValue.textContent = this.value;
    });

    // Form submission handler
    simulationForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // Get form values
        const numWater = parseInt(numWaterSlider.value);
        const numXenon = parseInt(numXenonSlider.value);
        
        // Show loading indicator and hide video
        loadingIndicator.classList.remove('hidden');
        videoElement.classList.add('hidden');
        statusMessage.className = '';
        statusMessage.textContent = '';
        
        // Look for the video file
        checkVideoExists(numWater, numXenon);
    });
    
    // Function to check if a video with the requested parameters exists
    function checkVideoExists(numWater, numXenon) {
        const videoUrl = `assets/simulation_w${numWater}_x${numXenon}.mp4`;
        const timestamp = new Date().getTime(); // Add timestamp to prevent caching
        
        fetch(`${videoUrl}?t=${timestamp}`, { method: 'HEAD' })
            .then(response => {
                if (response.ok) {
                    // Video exists - show it
                    showVideo(videoUrl, `Simulation with ${numWater} water molecules and ${numXenon} xenon atoms.`);
                    
                    // Add this video to the known videos list if not already there
                    const exists = knownVideos.some(video => 
                        video.water === numWater && video.xenon === numXenon
                    );
                    
                    if (!exists) {
                        knownVideos.push({
                            water: numWater,
                            xenon: numXenon,
                            file: `simulation_w${numWater}_x${numXenon}.mp4`
                        });
                    }
                } else {
                    // Video doesn't exist - find closest match
                    statusMessage.className = 'info';
                    statusMessage.textContent = `The exact simulation (${numWater} water, ${numXenon} xenon) hasn't been generated yet. `;
                    statusMessage.textContent += `To generate it, go to the GitHub repository Actions tab and manually trigger the workflow.`;
                    
                    findClosestVideo(numWater, numXenon);
                }
            })
            .catch(error => {
                console.error('Error checking video existence:', error);
                statusMessage.className = 'error';
                statusMessage.textContent = 'Error checking for video. Using default video instead.';
                showVideo('assets/default.mp4', 'Default simulation (error occurred during video lookup).');
            });
    }
    
    // Function to show a video with a status message
    function showVideo(videoUrl, message) {
        // Hide loading indicator and show video
        loadingIndicator.classList.add('hidden');
        videoElement.classList.remove('hidden');
        
        // Set video source with cache-busting parameter
        const timestamp = new Date().getTime();
        videoElement.src = `${videoUrl}?t=${timestamp}`;
        
        // Display success message
        statusMessage.className = 'success';
        statusMessage.textContent = message;
        
        // Load and play the video
        videoElement.load();
        videoElement.play();
    }
    
    // Function to find the closest pre-generated video
    function findClosestVideo(numWater, numXenon) {
        // If no videos are known, use default
        if (knownVideos.length === 0) {
            showVideo('assets/default.mp4', 'Default simulation (no other videos available).');
            return;
        }
        
        // Find closest match using Euclidean distance
        let closestVideo = knownVideos[0];
        let minDistance = Math.sqrt(
            Math.pow(numWater - knownVideos[0].water, 2) + 
            Math.pow(numXenon - knownVideos[0].xenon, 2)
        );
        
        for (let i = 1; i < knownVideos.length; i++) {
            const distance = Math.sqrt(
                Math.pow(numWater - knownVideos[i].water, 2) + 
                Math.pow(numXenon - knownVideos[i].xenon, 2)
            );
            
            if (distance < minDistance) {
                minDistance = distance;
                closestVideo = knownVideos[i];
            }
        }
        
        // Show the closest video
        const videoUrl = `assets/${closestVideo.file}`;
        let message = `Showing closest available simulation: ${closestVideo.water} water molecules and ${closestVideo.xenon} xenon atoms.`;
        
        showVideo(videoUrl, message);
    }
    
    // Function to update the known videos list from a JSON file
    // This can be used if you create a videos.json file with the list of all generated videos
    function updateKnownVideos() {
        fetch('assets/videos.json')
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                // If file doesn't exist, just use what we have
                throw new Error('videos.json not found');
            })
            .then(data => {
                if (Array.isArray(data.videos)) {
                    knownVideos.length = 0; // Clear existing array
                    // Add all videos from JSON
                    data.videos.forEach(video => knownVideos.push(video));
                }
            })
            .catch(error => {
                console.log('Using default video list:', error);
            });
    }
    
    // Try to update the known videos list when the page loads
    updateKnownVideos();
    
    // Add the default video to knownVideos if it's not already there
    // Ensure we always have at least one video to show
    fetch('assets/default.mp4', { method: 'HEAD' })
        .then(response => {
            if (response.ok && !knownVideos.some(v => v.file === 'default.mp4')) {
                knownVideos.push({ water: 400, xenon: 20, file: 'default.mp4' });
            }
        })
        .catch(() => {
            console.log('Default video not found');
        });
});
